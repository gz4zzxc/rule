# 项目维护指南

## 日常维护任务

### 1. 规则更新
- **定期检查**: 每周检查一次规则文件的有效性
- **订阅源更新**: 关注 ACL4SSR、blackmatrix7 等规则源的更新
- **自定义规则**: 及时更新自己添加的规则

### 2. 配置文件维护
- **配置备份**: 修改重要配置前先备份
- **版本控制**: 使用 Git 管理配置变更
- **测试验证**: 修改配置后测试功能是否正常

### 3. 性能监控
- **节点质量**: 定期检查代理节点的延迟和稳定性
- **规则效率**: 监控规则匹配的性能影响
- **内存使用**: 关注 Clash 的内存占用情况

## 故障排除

### 常见问题
1. **代理无法连接**
   - 检查端口配置是否正确
   - 验证代理节点是否可用
   - 检查防火墙设置

2. **规则不生效**
   - 确认规则文件格式正确
   - 检查规则优先级设置
   - 验证规则语法

3. **性能下降**
   - 检查规则数量是否过多
   - 优化代理组配置
   - 调整测试参数

### 调试方法
```bash
# 检查 Clash 日志
tail -f ~/.config/clash/logs/clash.log

# 测试代理连接
curl -x http://127.0.0.1:7890 https://www.google.com

# 验证配置文件语法
clash -t -f config.yml
```

## 最佳实践

### 1. 规则管理
- **分类清晰**: 按功能或服务类型组织规则
- **注释完整**: 为复杂规则添加说明
- **版本记录**: 记录重要规则的变更历史

### 2. 配置优化
- **模块化**: 将配置拆分为多个文件便于管理
- **模板化**: 使用锚点和引用减少重复配置
- **参数化**: 将常用参数提取为变量

### 3. 安全考虑
- **访问控制**: 限制外部控制器的访问权限
- **规则验证**: 验证第三方规则源的安全性
- **备份策略**: 建立完善的备份和恢复机制

## 更新流程

### 1. 准备阶段
- 备份当前配置
- 检查更新日志
- 准备回滚方案

### 2. 更新阶段
- 下载新规则
- 测试配置有效性
- 逐步部署更新

### 3. 验证阶段
- 功能测试
- 性能测试
- 稳定性监控

## 工具推荐

### 1. 规则验证工具
- **Clash**: 内置配置验证功能
- **YAML 验证器**: 检查配置文件语法
- **正则表达式测试器**: 验证过滤规则

### 2. 监控工具
- **Clash Dashboard**: 内置监控界面
- **系统监控**: 监控系统资源使用
- **网络测试**: 测试网络连接质量

### 3. 备份工具
- **Git**: 版本控制和备份
- **rsync**: 文件同步和备份
- **脚本自动化**: 自动备份和更新
description:
globs:
alwaysApply: false
---
